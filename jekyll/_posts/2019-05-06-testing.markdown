---
layout: post
title:  "Tests should cover your back"
date:   2019-05-06 01:23:45 +0300
categories: testing
---

>
> <span style="color: #15873f;"> \[guru\] Just to make sure, did you have your tests in place? </span>
>
> <span style="color: #0e103a;"> \[me\] Well, no.. </span>
>
> <span style="color: #15873f;"> \[guru\] \*sigh\* You know that code without tests is broken, don't you? </span>
> 


This blog is not about testing, but you really should have your tests in place. If you don't, it's a matter of time you'll accidentally break something. I know, I have done it often enough, that I'll have my tests now covering my back. 

## Don't know where to start?

If you don't know where to start with testing follow the four steps below. It'll help you to get started. If you actually have your tests covering your back, check at least the fourth point. It'll often neglected.


#### 1. First figure out what and why

You should know why people are always talking about testing and why it matters. Real Python has a [good article about testing](https://realpython.com/python-testing/) that'll get you started. Then, [this tutorial](https://docs.python-guide.org/writing/tests/) gives brief overview of what is testing in Python. If you feel that you could read still more, consider even reading a book about testing. That'll pay-up later.


#### 2. Then see what your framework suggests

Always know what your framework is doing on testing front. It could be [Django](https://docs.djangoproject.com/en/2.2/topics/testing/), [Flask](https://flask.palletsprojects.com/en/1.1.x/testing/) or maybe one of the new ones like [Sanic](https://sanic.readthedocs.io/en/latest/sanic/testing.html) or [aiohttp](https://docs.aiohttp.org/en/stable/testing.html). In any case, see how your code should be tested.

It's often easiest to follow testing documentation of the framework even if it would not use the testing framework you would want to use. If you framework does not suggest good testing practices, change framework.


#### 3. No framework to show the way?

If you don't have framework to show the way, consider choosing [pytest](https://pytest.org/en/latest/). The testing framework you should choose for your project depends on the project you are doing. However, you cannot go wrong with pytest. Alternatives could be e.g. [nose](https://nose.readthedocs.io) or maybe [unittest](https://docs.python.org/3.7/library/unittest.html) and it's good to give a look.

If you'll choose pytest you should visit [pythontesting.net](http://pythontesting.net/start-here/).


#### 4. Always use your IDE wisely

Your IDE - _you should proper IDE_ - most likely provide nice iterface to tests. I would recommend [PyCharm](https://www.jetbrains.com/help/pycharm/testing.html) or [VS Code](https://code.visualstudio.com/docs/python/testing). Running tests from IDE is one thing, but make sure you know how to also debug tests with your preferred IDE [\[1\]](https://www.jetbrains.com/help/pycharm/debugging-code.html), [\[2\]](https://code.visualstudio.com/Docs/editor/debugging)


## You should know your IDE

The last step of the list above cannot be stressed enough. Firstly, choose the IDE that you like. Most often for Python programmers it's lately been PyCharm or VS Code. They are both very good. If you feel that simple editor is enough, why to use heavy IDE, then you just don't know what you are missing. 

{:refdef: style="text-align: center; margin-top: 40px; margin-bottom: 40px;"}
[![XKCD 353](/assets/img/vs-code-test-results.png)](https://code.visualstudio.com/docs/python/testing)
{: refdef}

If you have that _bug_ icon working and know how to step through your tests after newly breaking test, your life is a breeze. Choosing IDE is always based on opinions and preferences, but remember to include _"good testing support"_ into your checklist when choosing IDE.


