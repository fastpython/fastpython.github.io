---
layout: post
title:  "Benchmark HTTP request handling with wrk"
date:   2019-07-08 10:05:00 +0300
categories: benchmark profile
---

>
> <span style="color: #0e103a;"> \[me\] Alright, let's start with measurements. How to do it? </span>
>
> <span style="color: #15873f;"> \[guru\] To give some estimate on where we are, measure the whole API request. Use e.g. [wrk](https://github.com/wg/wrk) to get some average values. </span>
>

# Benchmark HTTP request handling with wrk

To figure out the baseline "performance" for HTTP request handling like your API end-point, one good option is to use [wrk command line tool](https://github.com/wg/wrk). 

> wrk is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.

When profiling with wrk we are looking our API end-point as a black box and don't care what happens inside. We are interested only on how long it takes to get the response for our reqeust. 

Testing of the framework can be done e.g. with command below for running 30 seconds with 100 connections and 8 threads. See [wrk docs](https://github.com/wg/wrk#command-line-options) for more info on command line options.

```
wrk -d 30 -c 100 -t 8 --timeout 60 http://0.0.0.0:8000/items
```

And the response could be something like this:

```
Running 30s test @ http://0.0.0.0:8000/items
  8 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    62.78ms   23.52ms 255.74ms   65.34%
    Req/Sec   192.75     46.81   390.00     67.19%
  46040 requests in 30.09s, 26.39MB read
Requests/sec:   1529.83
Transfer/sec:      0.88MB
```

The absolute value doesn't matter much here, but comparison before and after changes when changes are done or with two different setups etc. 

## Test only reaquest at a time?

Depending what you are testing it might make sense to use only one thread and one open connection. For example, if testing locally with a dev server we don't necessarily have proper workers and other production server utilities in place. 

It'll make it more clear how much a single request takes to process if requesting:

```
wrk -d 30 -c 1 -t 1 --timeout 60 http://0.0.0.0:8000/items
```

